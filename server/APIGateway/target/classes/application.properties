.properties
spring.application.name=api-gateway
server.port=8090

# Auth0 Configuration
auth0.domain=dev-hhhixfqwct2ckaov.us.auth0.com
auth0.audience=https://seawave-backend/

# OAuth2 Resource Server Configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://${auth0.domain}/
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://${auth0.domain}/.well-known/jwks.json

# Gateway Configuration
# spring.cloud.gateway.server.webflux.routes[0].id=booking-service-route
# spring.cloud.gateway.server.webflux.routes[0].uri=http://localhost:8081
# spring.cloud.gateway.server.webflux.routes[0].predicates[0]=Path=/api/v1/booking/**
# spring.cloud.gateway.server.webflux.routes[0].filters[0]=StripPrefix=0

# Enable CORS for gateway
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allowed-origin-patterns=*
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allowed-headers=*
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allow-credentials=true


inventory.service.uri=http://localhost:8080
booking.service.uri=http://localhost:8081
order.service.uri=http://localhost:8082
user.service.uri=http://localhost:8085