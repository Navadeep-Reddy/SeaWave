services:
  inventory-db:
    image: postgres:15-alpine
    container_name: inventory-db-container
    environment:
      POSTGRES_PASSWORD: "12345"
      POSTGRES_USER: navadeep
      POSTGRES_DB: SeaWaveInventory
    volumes:
      - inventory_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U navadeep -d SeaWaveInventory"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  order-db:
    image: postgres:15-alpine
    container_name: order-db-container
    environment:
      POSTGRES_PASSWORD: "12345"
      POSTGRES_USER: navadeep
      POSTGRES_DB: SeaWaveOrder
    volumes:
      - order_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U navadeep -d SeaWaveOrder"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  user-db:
    image: postgres:15-alpine
    container_name: user-db-container
    environment:
      POSTGRES_PASSWORD: "12345"
      POSTGRES_USER: navadeep
      POSTGRES_DB: SeaWaveUser
    volumes:
      - user_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U navadeep -d SeaWaveUser"]
      interval: 10s
      timeout: 5s
      retries: 5 
    
  pgadmin:
    image: dpage/pgadmin4:8
    container_name: pgadmin_controller
    environment:
      PGADMIN_DEFAULT_EMAIL: navadeep@gmail.com
      PGADMIN_DEFAULT_PASSWORD: "2005"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "8000:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: kafka_zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  kafka-broker:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka_broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
      
  kafka-ui:
    container_name: kafka_ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8084:8080"
    depends_on:
      kafka-broker:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker:29092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://kafka-schema-registry:8081
    restart: unless-stopped
    
  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: kafka-schema-registry
    container_name: kafka_schema_registry
    depends_on:
      kafka-broker:
        condition: service_healthy
    ports:
      - "8083:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    volumes:
      - schema_registry_data:/var/lib/schema-registry
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  pgadmin_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  schema_registry_data:
  user_data:
  order_data:
  inventory_data:
  
  

